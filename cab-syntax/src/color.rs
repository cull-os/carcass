use yansi::{
    Color,
    Style,
};

const fn generate_style(r: u8, g: u8, b: u8) -> Style {
    let color = if (0.2126 * r as f32 + 0.7152 * g as f32 + 0.0722 * b as f32) < 140.0 {
        Color::Rgb(0xFF, 0xFF, 0xFF)
    } else {
        Color::Rgb(0, 0, 0)
    };

    color.on_rgb(r, g, b)
}

/// A list of visually distinct colors. Useful for coloring
/// individual tokens.
///
/// Generated using <https://mokole.com/palette.html>.
pub const COLORS: &[Style] = &[
    generate_style(0x00, 0x00, 0x00),
    generate_style(0x2F, 0x4F, 0x4F),
    generate_style(0x55, 0x6B, 0x2F),
    generate_style(0x8B, 0x45, 0x13),
    generate_style(0x7F, 0x00, 0x00),
    generate_style(0x19, 0x19, 0x70),
    generate_style(0x80, 0x80, 0x00),
    generate_style(0x77, 0x88, 0x99),
    generate_style(0x00, 0x80, 0x00),
    generate_style(0x3C, 0xB3, 0x71),
    generate_style(0xBC, 0x8F, 0x8F),
    generate_style(0x66, 0x33, 0x99),
    generate_style(0x00, 0x80, 0x80),
    generate_style(0xB8, 0x86, 0x0B),
    generate_style(0x46, 0x82, 0xB4),
    generate_style(0x00, 0x00, 0x80),
    generate_style(0xD2, 0x69, 0x1E),
    generate_style(0x9A, 0xCD, 0x32),
    generate_style(0x20, 0xB2, 0xAA),
    generate_style(0xCD, 0x5C, 0x5C),
    generate_style(0x32, 0xCD, 0x32),
    generate_style(0x8F, 0xBC, 0x8F),
    generate_style(0x8B, 0x00, 0x8B),
    generate_style(0xB0, 0x30, 0x60),
    generate_style(0x99, 0x32, 0xCC),
    generate_style(0xFF, 0x00, 0x00),
    generate_style(0xFF, 0xA5, 0x00),
    generate_style(0xFF, 0xD7, 0x00),
    generate_style(0xFF, 0xFF, 0x00),
    generate_style(0xC7, 0x15, 0x85),
    generate_style(0x00, 0x00, 0xCD),
    generate_style(0xDE, 0xB8, 0x87),
    generate_style(0x00, 0xFF, 0x00),
    generate_style(0x00, 0xFF, 0x7F),
    generate_style(0x41, 0x69, 0xE1),
    generate_style(0xE9, 0x96, 0x7A),
    generate_style(0xDC, 0x14, 0x3C),
    generate_style(0x00, 0xFF, 0xFF),
    generate_style(0x00, 0xBF, 0xFF),
    generate_style(0xF4, 0xA4, 0x60),
    generate_style(0x93, 0x70, 0xDB),
    generate_style(0x00, 0x00, 0xFF),
    generate_style(0xA0, 0x20, 0xF0),
    generate_style(0xAD, 0xFF, 0x2F),
    generate_style(0xFF, 0x63, 0x47),
    generate_style(0xDA, 0x70, 0xD6),
    generate_style(0xD8, 0xBF, 0xD8),
    generate_style(0xFF, 0x00, 0xFF),
    generate_style(0xDB, 0x70, 0x93),
    generate_style(0xF0, 0xE6, 0x8C),
    generate_style(0x64, 0x95, 0xED),
    generate_style(0xDD, 0xA0, 0xDD),
    generate_style(0xB0, 0xE0, 0xE6),
    generate_style(0x90, 0xEE, 0x90),
    generate_style(0xFF, 0x14, 0x93),
    generate_style(0x7F, 0xFF, 0xD4),
    generate_style(0xFA, 0xFA, 0xD2),
    generate_style(0xFF, 0x69, 0xB4),
    generate_style(0xFF, 0xB6, 0xC1),
    generate_style(0xF8, 0xF8, 0xFF),
];
