# You can use this file standalone as well. No need for a default.cab.
#
# Just invoke `cab build package.cab` and since this file evaluates to
# a derivation when the `buildSystem` and `targetSystem` are overridden,
# you will get a symlink to `/cull/store/<name>` in `./result`.

inputs @ {
  buildSystem = undefined;
  targetSystem = undefined;

  packages = import <github:cull-os/packages> <== inputs;
} ==> packages.rustPackage {
  name = "cab";
  version = readFile ../cab/Cargo.toml
    # That is a pipe operator!
    |> fromTOML
    # Since the . operator is used to access attributes,
    # the builtin functions have a function named `.` that is defined as:
    #
    # `.` = attribute: set: set.`\(attribute)`;
    #
    # And you can use it to do neat stuff like this.
    # (though you should really prefer `toml: toml.package.version` here, this is just an example)
    |> `.` "package"
    |> `.` "version";

  source = ..;

  targetBuildDependencies = packages ==> [
    # We don't need this, but this is the way you'd do the equivalent of nixpkgs' `nativeBuildInputs`.
    lolhtml
  ];
}
